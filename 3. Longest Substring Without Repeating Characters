from:https://leetcode.com/problems/longest-substring-without-repeating-characters/
Given a string s, find the length of the longest substring without repeating characters.

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

Solution in Python
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        st=""
        uzun=0
        for i in range(len(s)):
            if s[i] in st:
                index=st.index(s[i])
                st=st[index+1:i]
            st=st+s[i]
            
            if uzun<len(st):
                uzun=len(st)
        return uzun
        
Solution in C++
 class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        int longestSize = 0;        
        unordered_map <char, bool> checkedLetter;   
        for (int start = 0, end = 0; start < s.length() && end < s.length();) {
            if (checkedLetter[s[end]] == false) {
                checkedLetter[s[end]] = true;
                end = end + 1;
                longestSize = max(longestSize, end-start);
            } else {
                checkedLetter[s[start]] = false;
                start = start + 1;
            }
        }
        return longestSize;
    }
};
